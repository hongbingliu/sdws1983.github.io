<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Min.教你远离剧荒（2）]]></title>
      <url>http://yoursite.com/2016/09/03/Min-%E6%95%99%E4%BD%A0%E8%BF%9C%E7%A6%BB%E5%89%A7%E8%8D%92%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>上次我们已经获得了tag标签，现在我打算对标签进行排列组合。<br>这里仅计算组合结果，不进行排列，计算公式为：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEbLTZRu9CNWqaaNdPYiaMmKX38Bic4w0JJxD7n7Uc6WS0nuo4ZKDDia2uw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>计算出所有tag在不同n情况下的组合，再用这些组合进行反向筛选电影，n越大权重越高，所以对n降序排列。<br>有些电影的tag数过多，所以决定只取5个tag。<br><a id="more"></a><br>先上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">''' Mingo's movie_recommend script '''</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrange</span><span class="params">(tag)</span>:</span></div><div class="line">   <span class="keyword">for</span> num <span class="keyword">in</span> range(len(tag), <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">      s = (list(itertools.combinations(tag, num)))</div><div class="line">      print(s)</div></pre></td></tr></table></figure></p>
<p>这里我用到了itertools模块进行组合运算，itertools.combinations(tag, num)即从tag中取出num个元素进行组合，各组合return一个元组，list返回一个列表。这里range是反向排列的，因为num越大权重越大。输出如下：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEsanr3YMdiaIu9R7EY5POxXCPujLR3viare7IJEiaBa3h59TwXj8xDvWvw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>得到了标签的组合，现在再观察豆瓣电影标签查找电影的页面：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEpmWBaVCcFRLhCFkyNTMg7fhCBHZ0ickwEZia1ztjFGugA8GP9XHNEpeQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>发现url的规律即：</p>
<pre><code>https://movie.douban.com/tag/
</code></pre><p>加上：<br>    东野圭吾%20推理%20日本%20福山雅治%20悬疑<br>其中的%20为空格，再对中文进行编码即可，于是修改代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrange</span><span class="params">(tag)</span>:</span></div><div class="line">   url_tag = <span class="string">"https://movie.douban.com/tag/"</span></div><div class="line">   <span class="keyword">for</span> num <span class="keyword">in</span> range(len(tag), <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">      s = (list(itertools.combinations(tag, num)))</div><div class="line">      <span class="comment">#print(s)</span></div><div class="line">      <span class="keyword">for</span> each <span class="keyword">in</span> s:</div><div class="line">         url = url_tag + urllib.parse.quote(<span class="string">' '</span>.join(each))</div><div class="line">         <span class="keyword">print</span> (url)</div></pre></td></tr></table></figure></p>
<p>输出了通过所有的tag组合查找的网址。<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEua6X5X9uwcra3W4bJ4q8Mg6Qljg9geViaU9ibhhQvXjKLjtibKuTnsdNA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>查看输出url的网页源代码，很容易找到了电影名所在位置。<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEHiaWiat9dk9uBE2mfaDU0sB7eFHycnNnf7JJgv4MaMtMVBwN4bMk8fxg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br>但也有的tag组合可能查找不到电影，则查找不到a class：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEopR39vC2Ho2D4xWbTH80NYQn7KJOzwOYBcgBZkOsKs9j4Zal1s0uNQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br>查找不到的即跳过，选出查找到的前十部即可。</p>
<p>直接上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="string">''' Mingo's movie_recommend script '''</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrange</span><span class="params">(tag,url_pre)</span>:</span></div><div class="line"></div><div class="line">   url_tag = <span class="string">"https://movie.douban.com/tag/"</span></div><div class="line">   all = []</div><div class="line"></div><div class="line">   <span class="keyword">for</span> num <span class="keyword">in</span> range(len(tag), <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">      s = (list(itertools.combinations(tag, num)))</div><div class="line">      <span class="comment">#print(s)</span></div><div class="line">      <span class="keyword">for</span> each <span class="keyword">in</span> s:</div><div class="line">         url = url_tag + urllib.parse.quote(<span class="string">' '</span>.join(each))</div><div class="line">         html = get_html(url)</div><div class="line">         end = <span class="number">0</span></div><div class="line">         <span class="comment">#print (url)</span></div><div class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> range(len(re.findall(<span class="string">'a class="nbg" href="'</span>, html))):</div><div class="line">               start = html.find(<span class="string">'a class="nbg" href="'</span>, end) + len(<span class="string">'a class="nbg" href="'</span>)</div><div class="line">               end = html.find(<span class="string">'"  title='</span>, start)</div><div class="line">               name_start = end + len(<span class="string">'"  title="'</span>)</div><div class="line">               name_end = html.find(<span class="string">'"&gt;'</span>, name_start)</div><div class="line"></div><div class="line">               <span class="keyword">if</span> html[start:end] != url_pre <span class="keyword">and</span> <span class="keyword">not</span> re.findall(html[start:end], <span class="string">''</span>.join(all)):</div><div class="line">                  all.append(html[name_start:name_end] + <span class="string">"\t"</span> + html[start:end] + <span class="string">"\n"</span>)</div><div class="line">                  <span class="keyword">if</span> len(all) == <span class="number">10</span>:</div><div class="line">                     <span class="keyword">return</span> <span class="string">''</span>.join(all)</div><div class="line">               <span class="comment">#print (html[name_start:name_end] + "\n" + html[start:end])</span></div><div class="line">               <span class="comment">#print (start,end,name_start,name_end)</span></div></pre></td></tr></table></figure></p>
<p>这里写的有些繁琐，首先arrange函数传入2个参数，tag为之前的标签，url_pre 为输入电影的地址。创建了一个all的list用于储存数据，url获得了标签组合的网址，利用之前的get_html()函数进行解析。之后在网页中查找地址，这里并没有用到BeautifulSoup，只用了普通的find查找。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">'a class="nbg" href="'</span>, html)</div></pre></td></tr></table></figure></p>
<p>利用正则表达式查找出html电影的个数，进行循环。<br>start, end, name_start, name_end为4个数值，代表电影名起止位置及电影url起止位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> html[start:end] != url_pre <span class="keyword">and</span> <span class="keyword">not</span> re.findall(html[start:end], <span class="string">''</span>.join(all)):</div><div class="line">    all.append(html[name_start:name_end] + <span class="string">"\t"</span> + html[start:end] + <span class="string">"\n"</span>)</div><div class="line">    <span class="keyword">if</span> len(all) == <span class="number">10</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(all)</div></pre></td></tr></table></figure></p>
<p>这里进行条件判断，两个条件：（1）要求此刻查找出的电影url与输入的电影url不同，这里就用到了arrange函数中传入的url_pre；（2）要求此刻查找出的电影url与all列表中已添加的电影url不同，以免最终结果中出现相同的电影。满足这两个条件即可将此电影url及名称添加进list。<br>添加完后再进行条件判断，如果添加个数达到10个则停止循环，直接返回all。</p>
<p>大致如此，让我们测试一下：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEZ4D9iadNJvfev8CjmefFjlLpicpq3HeKTwXqcANiaH4caFhgqKoCOrh6w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEpceZGtrvKMR55kZYGdkLZv1sM77gyh9RLl9IkxaKCpttOnMicc0NvKA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEsC8jLAURZiapBhcOf2qTKPDf7l95CdHBx1m1bHklWZ7icUiaLAaJqrdpg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEAowhu0PM3UpFyP0knjaFuFRL2vztbwyFBgHE3AXH445jib9q149M3Cg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>噢。。似乎还可以的样子。对输入单部影片来说，似乎就到这里可以了。。</p>
<p>但做单部影片也太没挑战性了，于是我决定在修改一下，在输入多部影片时，依旧能够找出最相近的影片。<br>首先多部影片就会有多个tag标签，不同影片可能会有相同的标签或不同的标签，所以需要搜集标签进行排序。<br>所以：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tag_all = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag_sort</span><span class="params">(tag,tag_all)</span>:</span></div><div class="line">   <span class="keyword">for</span> each <span class="keyword">in</span> tag:</div><div class="line">      <span class="keyword">if</span> each <span class="keyword">not</span> <span class="keyword">in</span> tag_all.keys():</div><div class="line">         tag_all[each] = <span class="number">1</span></div><div class="line">      <span class="keyword">else</span>:</div><div class="line">         tag_all[each]+=<span class="number">1</span></div><div class="line">   <span class="keyword">return</span> tag_all</div></pre></td></tr></table></figure></p>
<p>tag_sort()函数传入2个参数，tag为之前得到的标签，tag_all即为我们新创建的dict字典，用来储存tag并进行计数；tag为一个list，for each 遍历tag，进行条件判断：如果这个标签不存在于tag_all的key中，则将此标签添加进去；如果，存在，则将tag_all中此标签的values 加一。遍历完后此函数return一个tag_all字典。</p>
<p>为了配合，我们将主函数也修改了一下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">   name = input(<span class="string">"movie name:"</span>)</div><div class="line">   name_list = name.split(<span class="string">','</span>)</div><div class="line">   tag_all = &#123;&#125;</div><div class="line">   <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</div><div class="line">      <span class="comment">#print (name)</span></div><div class="line">      url_pre = <span class="string">"https://movie.douban.com/subject_search?search_text="</span> + urllib.parse.quote(name)</div><div class="line">      html = get_html(url_pre)</div><div class="line">      movie_url = analyse(html)</div><div class="line">      html_movie = get_html(movie_url)</div><div class="line">      movie_tag = tag(html_movie)</div><div class="line">      tag_all = tag_sort(movie_tag,tag_all)</div><div class="line">   <span class="keyword">print</span> (tag_all)</div><div class="line">   <span class="comment">#print (arrange(movie_tag, movie_url))</span></div></pre></td></tr></table></figure></p>
<p>电影名之间以”,”分隔，输出：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xE28h7r2uzoKHiaJ9DWTibJLbNiaJC0Q4Z6lhkpAdWBZwnLWdlu1MFltoKQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>看到输出的字典中喜剧，美国，动画的values最大，所以我们对字典进行排列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tag_dict = sorted(tag_all.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line">movie_tag = []</div><div class="line"><span class="keyword">for</span> ta <span class="keyword">in</span> tag_dict[:<span class="number">5</span>]:</div><div class="line">   movie_tag.append(ta[<span class="number">0</span>])</div><div class="line"><span class="keyword">print</span> (movie_tag)</div></pre></td></tr></table></figure></p>
<p>这里tag_all.items()得到(键，值)的列表，sorted方法，通过key这个参数，reverse=TRUE表示降序。</p>
<p>最后输出：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEibwI4mUPodciaC77GWRzTD4UGiaRspx3GGJMIbETQTR58Aeg5NwvbhKLQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>看来没问题，排列输出正确。<br>将输出的list再拼接回去，再输出：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEgbmOBDwSp4SNrh1sdeIS72iaIzgvFPP5MzXsGH5oL0K1VZZoYws93cg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xElJX0d2npFGqGibX93XX42JR9bvgSnl1gdWBOEbDEUl60C4ObzRBZeCA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgWPsTQd2mXTyGKaFomV81xEeI7JDcq80kGtKuCDhicI1fvOccWlMuj1GTyUwib7HqKsPtMdiaYqnld8A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>okay，就这样完成了！效果似乎还不错。<br>于是你可以输入各种你喜欢的剧，看看这个小脚本到底给不给力吧！</p>
<p>最后把源代码上传到了github上。<br><a href="https://github.com/sdws1983" target="_blank" rel="external">Mingo’s Github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Min.教你远离剧荒（1）]]></title>
      <url>http://yoursite.com/2016/08/11/Min-%E6%95%99%E4%BD%A0%E8%BF%9C%E7%A6%BB%E5%89%A7%E8%8D%92%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>假期嘛，就应该在家里吹着空调吃着冰棍看着剧。但是，剧荒了该怎么办！<br>好吧，我感觉最近也是没剧可看，于是我想着能不能自己写个荐剧的小脚本。<br><a id="more"></a><br>打开豆瓣电影，随便找一部影片打开。<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgVeicWqnhcqWrJfcRQyHJOOFCicmib39m2ddk9tZibJjH8dSkia8zj53ytnVQD13fTKMUhKWVMD4v3bWwg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>每部影片的界面大致如此，看看有什么可以利用来进行筛选的元素。<br>我大致的思路如此：输入一些自己喜欢的影片，找到这些影片的相似之处，之后再筛选推荐出我可能喜欢的影片。<br>于是我觉得可以利用右下角的标签过滤出自己喜欢的影片之间的相同点。<br>右键查看网页源代码，ctrl+F，查找标签：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgVeicWqnhcqWrJfcRQyHJOOFIYhyQTIkXm0kuhJWcyQsbibFZE8XySibT3272B7EaxjbX2CKo6uNN7zQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br>okay，很容易地找到了标签的位置。</p>
<p>让我们从头开始，首先根据名字查找电影。在豆瓣电影搜索电影名字，很容易发现豆瓣就是地址栏后面加了search。搜索后页面出现了很多电影的名单，找第一个的地址即可，也是右键查看源代码：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgVeicWqnhcqWrJfcRQyHJOOFDpT5aJVUbREgkEcFgTwWebRHtS3GjBpg25p3SBu8V89RPTmWSmV2HA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""><br>发现了电影的地址，这里我使用Python3 + BeautifulSoup4直接得到，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="string">''' Mingo's movie_recommend script '''</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> urllib.parse</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></div><div class="line"></div><div class="line">   send_headers = &#123;</div><div class="line">      <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36'</span>,</div><div class="line">      <span class="string">'Accept'</span>:<span class="string">'*/*'</span>,</div><div class="line">      <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span>,</div><div class="line">      <span class="string">'Host'</span>:<span class="string">'movie.douban.com'</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   req = urllib.request.Request(url,headers = send_headers)</div><div class="line">   response = urllib.request.urlopen(req)</div><div class="line">   html = response.read().decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">   <span class="keyword">return</span> html</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(html)</span>:</span></div><div class="line">   soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</div><div class="line">      <span class="keyword">try</span>:</div><div class="line">         content = i[<span class="string">'href'</span>]</div><div class="line">         <span class="keyword">if</span> <span class="string">'/subject/'</span> <span class="keyword">in</span> content:</div><div class="line">            <span class="keyword">print</span> (content)</div><div class="line">            <span class="keyword">break</span></div><div class="line">      <span class="keyword">except</span>:</div><div class="line">         <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">   name = input(<span class="string">"movie name:"</span>)</div><div class="line">   url = <span class="string">"https://movie.douban.com/subject_search?search_text="</span> + urllib.parse.quote(name)</div><div class="line">   html = get_html(url)</div><div class="line">   analyse(html)</div></pre></td></tr></table></figure>
<p>这里需要注意的是url中的中文处理，这里使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">urllib.parse.quote()</div></pre></td></tr></table></figure></p>
<p>进行编码，BeautifulSoup直接获得标签内容。<br>输出结果得到电影地址，即：</p>
<pre><code>https://movie.douban.com/subject/21817627/
</code></pre><p>再获得得到的地址网页内容，根据上面的步骤获取标签：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">''' Mingo's movie_recommend script '''</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(html)</span>:</span></div><div class="line">    soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</div><div class="line">    tag = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            content = i[<span class="string">'href'</span>]</div><div class="line">            <span class="keyword">if</span> <span class="string">'/tag/'</span> <span class="keyword">in</span> content:</div><div class="line">                tag.append(i.string)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> tag[<span class="number">1</span>:]</div></pre></td></tr></table></figure></p>
<p>输入电影地址，返回一个所有标签的列表，这样我们得到了tag：<br><img src="http://mmbiz.qpic.cn/mmbiz/nvWlHia9NcgVeicWqnhcqWrJfcRQyHJOOFzJCiacaRfkmxlAibwsykhc0ZQRCFHnHUWrf4A8zxTJcxLmezUXftmvuw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>于是我们准备再对tag进行处理，搜集所有影片的tag，之后对所有tag进行排列组合，再使用tag组合后进行反向搜索得到推荐电影，大致就是这个思路。</p>
<p>今天太迟了打算放到明天再继续。。</p>
<p>未完待续。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rookie's Quant-trading(1)]]></title>
      <url>http://yoursite.com/2016/08/05/Rookie-s-Quant-trading-1/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/8e5864d2fdceb0af.jpg" alt=""><br>量化交易似乎是一个很高大上的名词，隔行如隔山，以我短浅的股票投机经历，我也只能边学习边探讨。<br>也是从Crossin这个公众号受到启发，又跟师兄聊了一些投机经历，这两天开始小试牛刀一下。<br><a id="more"></a><br>平台选取在国内的：<br>    <em>优矿</em><br>    <a href="http://uqer.io" target="_blank" rel="external">uqer.io</a></p>
<p>进入，注册，然后开始研究，新建策略，这时候就给出了一个比较简单的策略。<br><img src="http://i1.piimg.com/567571/809b577337751962.png" alt=""></p>
<p>参考Crossin公众号的一些基本操作，打算自己先简单的编写一个策略试试手。<br>正好之前某天和师兄一起去下地，我们互相交流并探讨了一下关于股票投机的经历和一些操作观念。。从实验室聊到了车上，又从车上说到了地里。。总的来说，虽然我和师兄的投机观念有较大的不同，但也是可以求同存异的。<br>当天在地里，师兄就给我谈了谈他的一种交易手法。<br>基本是这样的：超短线进出，日跌幅小于3%，半仓；日跌幅大于3%小于6%，全仓；日跌幅大于6%，割肉止损；日涨幅大于9%，止盈。大概就是这些。<br>于是我试着把这个策略写了一下：<br><img src="http://i1.piimg.com/567571/20a052daed11c355.png" alt=""><br>简单解释一下：<br>start&amp;end：起始和结束时间，这里我是选择了一个2年的时间段。<br>universe：股池，这里我选择了师兄最喜欢交易的东航。<br>freq：策略类型，这里我选择的是日间交易<br>refresh_rate：调仓频率，由于是超短交易，所以我设为了每日交易。<br>initialize：账户初始化，暂时没有用到。<br>handle_data(account)：每次调仓的交易策略，最为主要。<br>    account.get_attribute_history：获取股票历时数据，这里传入的第一个参数“closePrice”为收盘价，第二个参数为10，即获取最近10天内该股的收盘价格，return一个list。<br>    account.universe：从全局变量universe和当前持有的股票池中，剔除了当天停牌、退市和数据异常股票的股池。<br>    hist[s][-1]/hist[s][-2]-1：最近交易日的日涨跌幅<br>    order_pct(s,0.5)：交易股票使其价值为账户总资产的50%，这里即半仓。<br>    order_to(s,0)：交易一定股票使交易后该股数量为0，即清仓。</p>
<p>大体就是如此，按此策略，我们试着跑了一下：<br><img src="http://i1.piimg.com/567571/24dfe884b4a7fc3a.png" alt=""><br>似乎还不错的样子，阿尔法达到了32.9%，应该说是轻松超过了基准，最大回撤还是有些大，达到了45.6%，不太理想，说明风险控制不足。于是我准备在此基础上再简单加一些风控机制。<br>即5日内跌幅大于10%或15日内涨幅超过50%时，全部清仓。<br>于是变成了：<br><img src="http://i1.piimg.com/567571/21c8e37d95511ce5.png" alt=""><br>再试着跑了一下：<br><img src="http://i1.piimg.com/567571/90ec267cb6bbe338.png" alt=""><br>看起来有效果了，阿尔法达到了62.9%，回撤也下降到了31.1%。从两图对比也可以看出在后半段15年8月左右的下跌中较好的控制了风险。</p>
<p>但我们也不能仅仅满足于此，股池内股票单一，只有一只东航，东航在14、15年涨幅巨大，本身就是只牛股，可能不太具有说服力，于是我又调仓换股，换个大蓝（烂）筹（丑），工商银行试试看。<br><img src="http://i1.piimg.com/567571/2ef731c4b539ddd0.png" alt=""><br>显然跟之前相比不尽如人意，想了想会不会是由于工行盘子太大，波动小导致此策略施展不开：）于是再换一只同样稳的不行的601857中国神油看看：<br><img src="http://i1.piimg.com/567571/132653e67386aeed.png" alt=""><br>果然也是不分上下，烂的抠脚啊。<br>既然如此，换成牛市后期和股灾中十分抢眼的国企改革龙头中粮生化看看：<br><img src="http://i1.piimg.com/567571/b3a14606ae444786.png" alt=""><br>嗯。。很惊人，再细看中粮这段时间的独立走势：<br><img src="http://i1.piimg.com/567571/90b4538335bf88bb.png" alt=""><br>发现策略在头肩顶结构后还能创出新高，嗯。。看来我做的这个简单风险控制策略还不错。。<br>当然我这只是粗略的写了一个小策略，也有许多不完善的地方，仓位的分散及股池内股票筛选、权重，都还没有制定，只是以一个简单的交易策略为依据，就当作练练手了。</p>
<p>可以参考：</p>
<p>阅读原文：Crossin的编程教室</p>
<p>优矿的API文档：<a href="https://uqer.io/help/faqApi/" target="_blank" rel="external">https://uqer.io/help/faqApi/</a></p>
<p>&amp;<br><img src="http://i1.piimg.com/567571/624d72ed1a888cdd.png" alt=""><br>讲了一些python做数据处理，之前有用R语言处理一些数据，虽然支持生信分析的包很多，但感觉用起来还是不太顺手，所以再准备学习一个。能用在平时学习上，顺便与量化交易做对接。</p>
<p>关于Quant-trading，我也只能闲暇时间学习一个，作为一个Rookie，我也只能偶尔写写心得，做一些微小的事情。</p>
]]></content>
    </entry>
    
  
  
</search>
